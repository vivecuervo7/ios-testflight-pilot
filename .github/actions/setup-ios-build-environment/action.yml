name: "Setup iOS Build Environment"
description: "Setup keychain, certificates, Xcode, and API keys for iOS builds"

inputs:
  certificate-base64:
    description: "Base64 encoded distribution certificate"
    required: true
  certificate-password:
    description: "Password for the distribution certificate"
    required: true
  app-store-connect-api-key:
    description: "App Store Connect API Key content"
    required: true
  app-store-connect-api-key-id:
    description: "App Store Connect API Key ID"
    required: true
  xcode-version:
    description: "Xcode version to use"
    required: true
  environment:
    description: "Environment name for keychain naming (dev, staging, prod)"
    required: true

outputs:
  keychain-name:
    description: "Name of the created keychain"
    value: ${{ steps.keychain.outputs.keychain-name }}

runs:
  using: "composite"
  steps:
    - name: Generate secure keychain password
      id: keychain-password
      shell: bash
      run: |
        # Generate a random 32-character password for the keychain
        KEYCHAIN_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-32)
        echo "keychain-password=$KEYCHAIN_PASSWORD" >> $GITHUB_OUTPUT

    - name: Create keychain
      id: keychain
      shell: bash
      run: |
        KEYCHAIN_NAME="build-${{ inputs.environment }}-${{ github.run_id }}.keychain"
        echo "keychain-name=$KEYCHAIN_NAME" >> $GITHUB_OUTPUT

        echo "Creating temporary keychain: $KEYCHAIN_NAME"
        security create-keychain -p "${{ steps.keychain-password.outputs.keychain-password }}" "$KEYCHAIN_NAME"
        security set-keychain-settings -lut 21600 "$KEYCHAIN_NAME"
        security default-keychain -s "$KEYCHAIN_NAME"
        security unlock-keychain -p "${{ steps.keychain-password.outputs.keychain-password }}" "$KEYCHAIN_NAME"

    - name: Install certificates
      shell: bash
      run: |
        echo "Installing Apple certificates into keychain: ${{ steps.keychain.outputs.keychain-name }}"

        # Import distribution certificate with private key
        echo "Importing distribution certificate with private key..."
        echo "${{ inputs.certificate-base64 }}" | base64 --decode > distribution.p12
        security import distribution.p12 -k "${{ steps.keychain.outputs.keychain-name }}" -P "${{ inputs.certificate-password }}" -T /usr/bin/codesign

        # Set key partition list for codesign access
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ steps.keychain-password.outputs.keychain-password }}" "${{ steps.keychain.outputs.keychain-name }}"

        # Verify certificate import
        echo "Certificates installed successfully"
        security find-identity -v -p codesigning "${{ steps.keychain.outputs.keychain-name }}"

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ inputs.xcode-version }}

    - name: Cleanup temporary certificate files
      if: always()
      shell: bash
      run: |
        rm -f distribution.p12
