name: "Build and Upload iOS App"
description: "Archive, export, and upload iOS app to TestFlight"

inputs:
  environment:
    description: "Environment to build for (dev, staging, prod)"
    required: true
  scheme-name:
    description: "Xcode scheme name to build"
    required: true
  app-store-connect-api-key:
    description: "App Store Connect API Key content"
    required: true
  app-store-connect-api-key-id:
    description: "App Store Connect API Key ID"
    required: true
  app-store-connect-issuer-id:
    description: "App Store Connect Issuer ID"
    required: true
  keychain-name:
    description: "Name of the keychain to use"
    required: true
  provisioning-profile-base64:
    description: "Base64 encoded provisioning profile for the environment"
    required: true

runs:
  using: "composite"
  steps:
    - name: Setup provisioning profile
      shell: bash
      run: |
        echo "Installing provisioning profile into keychain: ${{ inputs.keychain-name }}"

        # Decode and install provisioning profile
        echo "${{ inputs.provisioning-profile-base64 }}" | base64 --decode > profile.mobileprovision

        # Copy to provisioning profiles directory
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

        echo "Provisioning profile installed successfully"

    - name: Prepare build overrides
      shell: bash
      run: |
        cd Pilot
        echo "Scanning xcconfig files for variables..."

        # Find variables defined in xcconfig files
        XCCONFIG_VARS=$(find . -name "*.xcconfig" -exec grep -h "^[A-Z_][A-Z0-9_]*\s*=" {} \; | cut -d= -f1 | tr -d ' ' | sort -u)

        # Build list of environment variable overrides for xcconfig variables only
        ENV_OVERRIDES=""
        for var in $XCCONFIG_VARS; do
          if [ -n "${!var:-}" ]; then
            ENV_OVERRIDES="$ENV_OVERRIDES $var=\"${!var}\""
            echo "Overriding $var with environment value: ${!var}"
          fi
        done

        # Save overrides for next step
        echo "ENV_OVERRIDES=$ENV_OVERRIDES" >> $GITHUB_ENV

    - name: Build archive
      shell: bash
      run: |
        cd Pilot
        echo "Building archive for ${{ inputs.environment }} environment..."
        echo "Using build number: ${{ github.run_number }}"
        mkdir -p build

        eval "xcodebuild archive \
          -project Pilot.xcodeproj \
          -scheme \"${{ inputs.scheme-name }}\" \
          -archivePath \"build/Pilot-${{ inputs.environment }}.xcarchive\" \
          -destination \"generic/platform=iOS\" \
          CURRENT_PROJECT_VERSION=${{ github.run_number }} \
          $ENV_OVERRIDES"

    - name: Export IPA
      shell: bash
      run: |
        cd Pilot
        echo "Exporting IPA for ${{ inputs.environment }} environment..."
        xcodebuild -exportArchive \
          -archivePath "build/Pilot-${{ inputs.environment }}.xcarchive" \
          -exportPath "build/" \
          -exportOptionsPlist ../ExportOptions.plist \
          CURRENT_PROJECT_VERSION=${{ github.run_number }}

    - name: Setup App Store Connect API key
      shell: bash
      run: |
        # Create the API key file in the expected location
        mkdir -p /tmp/private_keys
        echo "${{ inputs.app-store-connect-api-key }}" > /tmp/private_keys/AuthKey_${{ inputs.app-store-connect-api-key-id }}.p8

    - name: Upload to TestFlight
      shell: bash
      env:
        API_PRIVATE_KEYS_DIR: /tmp/private_keys
      run: |
        cd Pilot
        echo "Uploading to TestFlight for ${{ inputs.environment }} environment..."

        # Upload the IPA to TestFlight using altool
        xcrun altool --upload-app \
          -f "build/Pilot.ipa" \
          -t ios \
          --apiKey "${{ inputs.app-store-connect-api-key-id }}" \
          --apiIssuer "${{ inputs.app-store-connect-issuer-id }}" \
          --verbose

    - name: Cleanup temporary files
      if: always()
      shell: bash
      run: |
        # Clean up temporary files
        rm -f profile.mobileprovision
        rm -rf /tmp/private_keys 2>/dev/null || true
