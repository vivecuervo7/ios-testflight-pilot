name: Deploy to TestFlight

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  XCODE_VERSION: "16.1"
  IOS_VERSION: "18.0"

jobs:
  deploy:
    runs-on: macos-latest
    timeout-minutes: 30
    strategy:
      matrix:
        environment: [dev, staging, prod]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate App Store Connect JWT Token
        id: jwt
        uses: ./.github/actions/generate-appstore-jwt
        with:
          api-key-id: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          issuer-id: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          api-private-key: ${{ secrets.APP_STORE_CONNECT_API_KEY }}

      - name: Test App Store Connect API
        run: |
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ steps.jwt.outputs.jwt-token }}" \
            -H "Content-Type: application/json" \
            "https://api.appstoreconnect.apple.com/v1/certificates?limit=1")

          [ "$HTTP_STATUS" -eq 200 ] && echo "App Store Connect API test successful!" || exit 1

      - name: Create keychain
        id: keychain
        run: |
          KEYCHAIN_NAME="build-${{ github.run_id }}-${{ matrix.environment }}.keychain"
          echo "keychain-name=$KEYCHAIN_NAME" >> $GITHUB_OUTPUT

          echo "Creating temporary keychain: $KEYCHAIN_NAME"
          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" "$KEYCHAIN_NAME"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_NAME"
          security default-keychain -s "$KEYCHAIN_NAME"
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" "$KEYCHAIN_NAME"

      - name: Setup iOS certificates
        uses: ./.github/actions/setup-ios-certificates
        with:
          keychain-name: ${{ steps.keychain.outputs.keychain-name }}
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}
          certificate-base64: ${{ secrets.DISTRIBUTION_CERTIFICATE_BASE64 }}
          certificate-password: ${{ secrets.DISTRIBUTION_CERTIFICATE_PASSWORD }}

      - name: Setup Dev provisioning profile
        if: matrix.environment == 'dev'
        uses: ./.github/actions/setup-ios-provisioning-profile
        with:
          keychain-name: ${{ steps.keychain.outputs.keychain-name }}
          provisioning-profile-base64: ${{ secrets.PROVISIONING_PROFILE_DEV_BASE64 }}
          profile-name: "Dev provisioning profile"

      - name: Setup Staging provisioning profile
        if: matrix.environment == 'staging'
        uses: ./.github/actions/setup-ios-provisioning-profile
        with:
          keychain-name: ${{ steps.keychain.outputs.keychain-name }}
          provisioning-profile-base64: ${{ secrets.PROVISIONING_PROFILE_STAGING_BASE64 }}
          profile-name: "Staging provisioning profile"

      - name: Setup Prod provisioning profile
        if: matrix.environment == 'prod'
        uses: ./.github/actions/setup-ios-provisioning-profile
        with:
          keychain-name: ${{ steps.keychain.outputs.keychain-name }}
          provisioning-profile-base64: ${{ secrets.PROVISIONING_PROFILE_PROD_BASE64 }}
          profile-name: "Prod provisioning profile"

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Run tests for Dev
        if: matrix.environment == 'dev'
        run: |
          cd Pilot
          xcodebuild test \
            -project Pilot.xcodeproj \
            -scheme "Pilot Dev" \
            -configuration Debug \
            -destination "platform=iOS Simulator,name=iPhone 15,OS=${{ env.IOS_VERSION }}" \
            -derivedDataPath DerivedData

      - name: Build archive for Dev
        if: matrix.environment == 'dev'
        run: |
          cd Pilot
          mkdir -p build
          xcodebuild archive \
            -project Pilot.xcodeproj \
            -scheme "Pilot Dev" \
            -configuration Release \
            -archivePath "build/Pilot-Dev.xcarchive" \
            -destination "generic/platform=iOS" \
            CODE_SIGN_IDENTITY="iPhone Distribution" \
            PROVISIONING_PROFILE_SPECIFIER="Dev provisioning profile"

      # TODO: Add TestFlight upload step later
      # TODO: Add build steps for staging and prod

      - name: Cleanup
        if: always()
        run: |
          # Clean up keychain
          security delete-keychain "${{ steps.keychain.outputs.keychain-name }}" 2>/dev/null || true
          security default-keychain -s login.keychain

          # Clean up provisioning profiles from both possible locations
          rm -rf ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision 2>/dev/null || true
          rm -rf ~/Library/Developer/Xcode/UserData/Provisioning\ Profiles/*.mobileprovision 2>/dev/null || true
